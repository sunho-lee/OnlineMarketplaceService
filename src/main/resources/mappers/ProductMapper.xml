<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.project.onlinemarketplaceservice.mapper.ProductMapper">

  <insert id="insertProduct" parameterType="InsertProductDto">
    INSERT INTO product (seller_id, title, price, shipping_fee, category_id, amount, description,
                         main_image, detailed_image1, detailed_image2, detailed_image3)
    VALUES (#{baseProductDto.sellerId}, #{baseProductDto.title}, #{baseProductDto.price},
            #{baseProductDto.shippingFee},
            #{baseProductDto.categoryId}, #{baseProductDto.amount}, #{description},
            #{baseProductDto.mainImage},
            #{detailedImage1}, #{detailedImage2}, #{detailedImage3});
  </insert>

  <select id="selectProductList" parameterType="SearchConditionDto" resultType="ProductListDto">
    SELECT product_id AS productId,
    product_name AS productName,
    category_id AS categoryId,
    tag,
    price,
    reg_dt AS registerDate,
    main_img AS mainImg
    FROM smartstore_db.product
    <where>
      <if test="categoryId != null">
        category_id = #{categoryId}
      </if>
      <if test="searchKeyword != null">
        AND (product_name LIKE CONCAT('%',#{searchKeyword},'%')
        OR tag LIKE CONCAT('%',#{searchKeyword},'%'))
      </if>
    </where>
    ORDER BY
    <choose>
      <when test="sort == 'date'">reg_dt DESC</when>
      <when test="sort == 'price_asc'">price</when>
      <when test="sort == 'price_desc'">price DESC</when>
    </choose>
    LIMIT #{pagingOffsetDto.offsetNum}, #{pagingOffsetDto.recordCountPerPage};
  </select>

  <select id="selectProductListCount" parameterType="SearchConditionDto" resultType="_int">
    SELECT COUNT(*)
    FROM smartstore_db.product
    <where>
      <if test="categoryId != null">
        category_id = #{categoryId}
      </if>
      <if test="searchKeyword != null">
        AND (product_name LIKE CONCAT('%',#{searchKeyword},'%')
        OR tag LIKE CONCAT('%',#{searchKeyword},'%'))
      </if>
    </where>
  </select>

  <resultMap id="productDetail" type="ProductDetailDto">
    <id property="productId" column="id"/>
    <id property="description" column="description"/>
    <id property="detailedImage1" column="detailed_image1"/>
    <id property="detailedImage2" column="detailed_image2"/>
    <id property="detailedImage3" column="detailed_image3"/>
    <id property="publishedAt" column="publishedAt"/>
    <association property="baseProductDto" javaType="BaseProductDto">
      <result property="sellerId" column="seller_id"/>
      <result property="title" column="title"/>
      <result property="price" column="price"/>
      <result property="shippingFee" column="shipping_fee"/>
      <result property="categoryId" column="category_id"/>
      <result property="amount" column="amount"/>
      <result property="mainImage" column="main_image"/>
    </association>
  </resultMap>

  <select id="selectProduct" parameterType="int" resultMap="productDetail">
    SELECT id,
           seller_id,
           title,
           price,
           shipping_fee,
           category_id,
           amount,
           description,
           main_image,
           detailed_image1,
           detailed_image2,
           detailed_image3,
           publishedAt
    FROM marketplace.product
    WHERE id = #{productId};
  </select>

  <update id="updateProduct">
    UPDATE marketplace.product
    SET title           = #{UpdateProductDto.baseProductDto.title},
        price           = #{UpdateProductDto.baseProductDto.price},
        shipping_fee    = #{UpdateProductDto.baseProductDto.shippingFee},
        category_id     = #{UpdateProductDto.baseProductDto.categoryId},
        amount          = #{UpdateProductDto.baseProductDto.amount},
        description     = #{UpdateProductDto.description},
        main_image      = #{UpdateProductDto.baseProductDto.mainImage},
        detailed_image1 = #{UpdateProductDto.detailedImage1},
        detailed_image2 = #{UpdateProductDto.detailedImage2},
        detailed_image3 = #{UpdateProductDto.detailedImage3}
    WHERE id = #{productId};
  </update>

  <delete id="deleteProduct">
    DELETE
    from smartstore_db.product
    WHERE product_id = #{productId}
      AND store_id = #{storeId};
  </delete>

</mapper>